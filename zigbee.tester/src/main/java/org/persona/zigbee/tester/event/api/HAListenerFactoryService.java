/*

   Copyright 2008-2013 CNR-ISTI, http://isti.cnr.it
   Institute of Information Science and Technologies 
   of the Italian National Research Council 


   See the NOTICE file distributed with this work for additional 
   information regarding copyright ownership

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package org.persona.zigbee.tester.event.api;

import it.cnr.isti.zigbee.ha.cluster.glue.Cluster;

/**
 * 
 * @author <a href="mailto:stefano.lenzi@isti.cnr.it">Stefano "Kismet" Lenzi</a>
 * @version $LastChangedRevision$ ($LastChangedDate$)
 * @since 0.3.0
 */
public interface HAListenerFactoryService {
	
	public final static String BRIDGED_EVENTS = "org.persona.zigbee.ha.event.bridgedevents";
	
	/**
	 * 
	 * @return an array of {@link String} containing the name of the {@link Cluster} class 
	 * that this factory can handle
	 */
	public String[] handledClusters();
	
	/**
	 * 
	 * @param cluster the {@link Cluster} that we want to check if can be handled by this factory
	 * @return true if and only if this factory can bridge the listener for the give {@link Cluster}
	 */
	public boolean handleCluster(Cluster cluster);
	
	/**
	 * 
	 * @param cluster the {@link Cluster} that whose events will be bridge
	 * @param listener the {@link HAGenericListener} to add as listener
	 * @return true if and only if the {@link HAGenericListener} has been added 
	 * as listener of the events generated by the {@link Cluster}
	 */
	public boolean addListener(Cluster cluster, HAGenericListener listener);
	
	/**
	 * 
	 * @param cluster the {@link Cluster} that whose events were bridged
	 * @param listener the {@link HAGenericListener} to remove as listener
	 * @return true if and only if the {@link HAGenericListener} has been removed
	 * as listener of the events generated by the {@link Cluster}
	 */
	public boolean removeListener(Cluster cluster, HAGenericListener listener);

}
